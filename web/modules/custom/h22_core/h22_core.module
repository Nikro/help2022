<?php

/**
 * @file
 * Contains h22_core.module.
 */

use Drupal\address\Plugin\Field\FieldWidget\AddressDefaultWidget;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\node\Entity\NodeType;
use Drupal\views\Plugin\views\row\RowPluginBase;
use Drupal\views\ResultRow;

/**
 * Implements hook_help().
 */
function h22_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the h22_core module.
    case 'help.page.h22_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Core module, required by the project.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function h22_core_theme() {
  return [
    'h22_core_homepage' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function h22_core_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  switch ($form['#id']) {
    case 'views-exposed-form-map-listings-page-map';
      $form["field_address_country_h22"]["#type"] = 'select2';
      $form["field_address_country_h22"]["#select2"] = [
        'allowClear' => FALSE,
        'width' => 'element',
      ];
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function h22_core_form_node_host_location_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  _h22_core_adjust_edit_or_add_for($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function h22_core_form_node_host_location_form_alter(&$form, FormStateInterface $form_state) {
  _h22_core_adjust_edit_or_add_for($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function h22_core_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  // Make sure captcha is at the right place.
  $form['captcha']['#weight'] = $form['actions']['#weight'] - 1;
  // Make a redirect on-submit.
  $form['#submit'][] = 'h22_core_user_login_redirect_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function h22_core_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Make a redirect on-submit.
  $form["actions"]["submit"]["#submit"][] = 'h22_core_user_user_profile_redirect_form_submit';
}

/**
 * Custom submit handler for the login form.
 */
function h22_core_user_login_redirect_form_submit($form, FormStateInterface $form_state) {
  $form_state->setRedirect('view.dashboards.page_locations');
}

/**
 * Custom submit handler for the login form.
 */
function h22_core_user_user_profile_redirect_form_submit($form, FormStateInterface $form_state) {
  $form_state->setRedirect('node.add', ['node_type' => 'host_location']);
}

/**
 * That's where we implement our changes.
 */
function _h22_core_adjust_edit_or_add_for(&$form, FormStateInterface $form_state) {
  // Get only configurable languages in content language selector.
  $new_language_options = [];
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $langcode => $language) {
    /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $language */
    $new_language_options[$langcode] = $language->getName();
  }
  $form["langcode"]["widget"][0]["value"]["#options"] = $new_language_options;

  // Hide author options if authenticated user.
  $current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();
  if (in_array('authenticated', $user_roles) && !in_array('administrator', $user_roles)) {
    $form['revision_log']['#access'] = FALSE;
    $form['meta']['#access'] = FALSE;
    $form['meta']['published']['#access'] = FALSE;
    $form['meta']['changed']['#access'] = FALSE;
    $form['meta']['author']['#access'] = FALSE;
    if ($form["revision"]["#type"] == 'checkbox') {
      $form["revision"]["#access"] = FALSE;
    }
    $form['field_source']['#access'] = FALSE;
  }

  // Conditional field.
  $form['field_organization_name']['#states']['visible'] = [
    ':input[name="field_type"]' => ['value' => 'organization']
  ];

  // Add HTML help text field.
  $form['meta']['host_location_help'] = [
    '#type' => 'item',
    '#markup' => t('If you are willing and capable to host refugees, please submit your details so refugees can contact you.'),
    '#wrapper_attributes' => ['class' => ['host_location_help']],
    '#weight' => '0',
  ];

  $form['meta']['host_location_warning'] = [
    '#type' => 'inline_template',
    '#template' =>
      "<div class='host_location_warning'>
    {{ 'As it is now wartime, please be wary of sabotage and Russian hacks.'|t }}<br>
    {{ 'We are taking all the safety measures to protect your data and your identity.'|t }}<br><br>

    {{ 'To help us take these measures:'|t }}<br>
    <ul>
        <li>{{ 'Do not share your precise home address.'|t }}</li>
        <li>{{ 'Talk to the person before accepting to host.'|t }}</li>
    </ul>

    {{ 'Follow the general safety measures to assure your and refugees safety.'|t }}
    </div>",
    '#weight' => '0',
  ];

  // Unset the suffixes.
  unset($form["field_host_kids"]["widget"][0]["value"]["#field_suffix"]);
  unset($form["field_host_adults"]["widget"][0]["value"]["#field_suffix"]);

  // Add the after-build to re-sort the damn countries.
  $form["field_address"]["widget"][0]["address"]["#after_build"][] = '_h22_core_form_address_adjust_countries_after_build';

  // Add the extra validation.
  $form['#validate'][] = '_h22_core_form_edit_host_location_validate_contacts';
}

/**
 * Adjust the countries.
 */
function _h22_core_form_address_adjust_countries_after_build($element, FormStateInterface $form_state) {
  $countries = $element["country_code"]["country_code"]["#options"];
  $countries = [
      '' => t('- Pick a country -'),
      'MD' => $countries['MD'],
      'RO' => $countries['RO'],
      'HU' => $countries['HU'],
      'SK' => $countries['SK'],
      'PL' => $countries['PL'],
      '-' => '---',
    ] + $countries;
  $element["country_code"]["country_code"]["#options"] = $countries;
  return $element;
}

/**
 * Custom form validation.
 */
function _h22_core_form_edit_host_location_validate_contacts(&$form, FormStateInterface $form_state) {
  $field_phone_number = $form_state->getValue('field_phone_number');
  $field_telegram = $form_state->getValue('field_telegram');
  $field_email = $form_state->getValue('field_email');
  $field_facebook = $form_state->getValue('field_facebook');

  if (empty($field_phone_number[0]['value']) &&
    empty($field_telegram[0]['value']) &&
    empty($field_email[0]['value']) &&
    empty($field_facebook[0]['value'])) {
    // Set an error for the form element with a key of "birth_year".
    $form_state->setErrorByName('field_phone_number', t('Please specify at least 1 way for people to reach you.'));
    $form_state->setErrorByName('field_telegram', t('Please specify at least 1 way for people to reach you.'));
    $form_state->setErrorByName('field_email', t('Please specify at least 1 way for people to reach you.'));
    $form_state->setErrorByName('field_facebook', t('Please specify at least 1 way for people to reach you.'));
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function h22_core_entity_extra_field_info() {
  $extra = array();

  $extra['node']['host_location']['display']['view_contacts_info'] = array(
    'label' => t('View GetContact Form'),
    'description' => t('Pseudo-field that renders a button'),
    'weight' => 100,
    'visible' => TRUE,
  );

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function h22_core_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('view_contacts_info')) {
    $form = \Drupal::formBuilder()->getForm('Drupal\h22_core\Form\ViewContactInformation', $entity);
    $build['form'] = $form;
    $build['form']['#weight'] = 9;
  }
}

/**
 * Implements hook_leaflet_views_feature_alter().
 */
function h22_core_leaflet_views_feature_alter(array &$feature, ResultRow $row, RowPluginBase $rowPlugin = NULL) {
  /** @var \Drupal\node\Entity\Node $entity */
  $entity = $row->_entity;
  $icon_class = 'marker-22';
  $theme = \Drupal::theme()->getActiveTheme();
  $module_handler = \Drupal::service('module_handler');
  $leaflet_path = $module_handler->getModule('leaflet')->getPath();

  switch ($entity->bundle()) {
    case 'host_location':
      $host_type = $entity->get('field_type')->first()->value;
      $icon_url = \Drupal::request()->getBasePath() . '/' . $theme->getPath() . '/media/assets/img/h22--marker--' . $host_type . '.png';
      $icon_retinal_url = \Drupal::request()->getBasePath() . '/' . $theme->getPath() . '/media/assets/img/h22--marker--' . $host_type . '-2x.png';
      $icon_class = 'marker--h22 marker-h22--' . $host_type;
      $shadow_url = \Drupal::request()->getBasePath() . '/'  . $leaflet_path . '/js/leaflet/dist/images/marker-shadow.png';
      $feature['icon']['iconSize'] = ['x' => '25', 'y' => '41'];
      $feature['icon']['shadowSize'] = ['x' => '41', 'y' => '41'];
      $feature['icon']['popupAnchor'] = ['x' => '1', 'y' => '-34'];
      $feature['icon']['iconAnchor'] = ['x' => '12', 'y' => '41'];
      break;

  }
  $feature['icon']['iconUrl'] = $icon_url ?? '';
  $feature['icon']['iconRetinaUrl'] = $icon_retinal_url ?? '';
  $feature['icon']['shadowUrl'] = $shadow_url ?? '';
  $feature['icon']['shadowRetinaUrl'] = $shadow_url ?? '';
  $feature['icon']['className'] = $icon_class;
}

/**
 * Implements hook_field_views_data().
 *
 * Views integration for address fields.
 */
/**
 * Implements hook_field_views_data_alter().
 */
function h22_core_field_views_data_alter(array &$data, \Drupal\field\FieldStorageConfigInterface $field) {
  $field_type = $field->getType();
  $field_name = $field->getName();
  if ($field_type == 'address') {
    foreach ($data as $table_name => $table_data) {
      $original_field = $data[$table_name][$field_name . '_' . 'country_code'];
      $data[$table_name][$field_name . '_' . 'country_h22'] = [];
      $data[$table_name][$field_name . '_' . 'country_h22']['title'] = t('H22 Country of @label (@name)', $original_field['title']->getArguments());
      $data[$table_name][$field_name . '_' . 'country_h22']['group'] = t('H22 Custom');
      $data[$table_name][$field_name . '_' . 'country_h22']['filter'] = [
        'id' => 'country_h22',
        'field_name' => $field_name,
        'real field' => $field_name . '_country_code',
        'property' => 'country',
      ];
    }
  }

  return $data;
}
